"use client"

import { useState, useEffect } from "react"
import Header from "../components/Header/Header"
import { db } from "../firebase/firebase"
import { collection, getDocs, query, orderBy, doc, updateDoc } from "firebase/firestore"

const ViewPipeLine = () => {
  const [source, setSource] = useState([])
  const [target, setTarget] = useState([])
  const [sourceFilter, setSourceFilter] = useState("")
  const [targetFilter, setTargetFilter] = useState("")
  const [selectedSource, setSelectedSource] = useState([])
  const [selectedTarget, setSelectedTarget] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchLeads()
  }, [])

  const fetchLeads = async () => {
    try {
      const q = query(collection(db, "leads"), orderBy("createdAt", "desc"))
      const querySnapshot = await getDocs(q)
      const leadsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        status: doc.data().status || "available",
      }))
      setSource(leadsData.filter(lead => lead.status === "available"))
      setTarget(leadsData.filter(lead => lead.status !== "available"))
    } catch (error) {
      console.error("Error fetching leads:", error)
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status) => {
    const colors = {
      New: "bg-blue-100 text-blue-800 border-blue-200",
      Contacted: "bg-yellow-100 text-yellow-800 border-yellow-200",
      Qualified: "bg-purple-100 text-purple-800 border-purple-200",
      "Proposal Sent": "bg-orange-100 text-orange-800 border-orange-200",
      Negotiation: "bg-indigo-100 text-indigo-800 border-indigo-200",
      Won: "bg-green-100 text-green-800 border-green-200",
      Lost: "bg-red-100 text-red-800 border-red-200",
    }
    return colors[status] || "bg-gray-100 text-gray-800 border-gray-200"
  }

  const filteredSource = source.filter(
    (item) =>
      item.name.toLowerCase().includes(sourceFilter.toLowerCase()) ||
      item.company.toLowerCase().includes(sourceFilter.toLowerCase()),
  )

  const filteredTarget = target.filter(
    (item) =>
      item.name.toLowerCase().includes(targetFilter.toLowerCase()) ||
      item.company.toLowerCase().includes(targetFilter.toLowerCase()),
  )

  const handleContact = async (lead) => {
    try {
      const updatedLead = { ...lead, status: "contacted" }
      const leadRef = doc(db, "leads", lead.id)
      await updateDoc(leadRef, { status: "contacted" })
      setTarget([...target, updatedLead])
      setSource(source.filter((item) => item.id !== lead.id))
    } catch (error) {
      console.error("Error updating lead status: ", error)
    }
  }

  const moveToTarget = async () => {
    const itemsToMove = source.filter((item) => selectedSource.includes(item.id))
    try {
      await Promise.all(
        itemsToMove.map(async (item) => {
          const leadRef = doc(db, "leads", item.id)
          await updateDoc(leadRef, { status: "contacted" })
        })
      )
      const updatedItems = itemsToMove.map((item) => ({ ...item, status: "contacted" }))
      setTarget([...target, ...updatedItems])
      setSource(source.filter((item) => !selectedSource.includes(item.id)))
      setSelectedSource([])
    } catch (error) {
      console.error("Error moving leads: ", error)
    }
  }

  const moveToSource = async () => {
    const itemsToMove = target.filter((item) => selectedTarget.includes(item.id))
    try {
      await Promise.all(
        itemsToMove.map(async (item) => {
          const leadRef = doc(db, "leads", item.id)
          await updateDoc(leadRef, { status: "available" })
        })
      )
      const updatedItems = itemsToMove.map((item) => ({ ...item, status: "available" }))
      setSource([...source, ...updatedItems])
      setTarget(target.filter((item) => !selectedTarget.includes(item.id)))
      setSelectedTarget([])
    } catch (error) {
      console.error("Error moving leads: ", error)
    }
  }

  const handleSourceSelect = (id) => {
    setSelectedSource((prev) => (prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]))
  }

  const handleTargetSelect = (id) => {
    setSelectedTarget((prev) => (prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]))
  }

  const LeadCard = ({ item, isSelected, onSelect, type }) => (
    <div
      className={`w-full mb-2 p-3 border rounded-lg transition-all duration-200 ${
        isSelected
          ? "border-blue-500 bg-blue-50 shadow-md"
          : "border-gray-200 bg-white hover:shadow-md hover:border-gray-300"
      }`}
    >
      <div className="flex items-center gap-4">
        <div className="relative h-16 w-16 flex-shrink-0 rounded-md overflow-hidden bg-gray-100">
          <div className="h-full w-full flex items-center justify-center bg-gray-300">
            <span className="text-2xl font-medium text-gray-700">
              {item.name.charAt(0).toUpperCase()}
            </span>
          </div>
        </div>

        <div className="flex-1 min-w-0">
          <h3 className="text-sm font-medium text-gray-900 truncate">{item.name}</h3>
          <div className="mt-1 flex items-center gap-2">
            <svg className="h-3.5 w-3.5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"
              />
            </svg>
            <span className={`text-xs px-2 py-0.5 rounded-full border ${getStatusColor(item.status)}`}>
              {item.status}
            </span>
          </div>
          <div className="mt-1 flex items-center gap-4">
            <div className="flex items-center text-sm text-gray-700">
              <svg className="h-3.5 w-3.5 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M16 12h2a2 2 0 002-2V7a2 2 0 00-2-2h-2m-8 0H6a2 2 0 00-2 2v3a2 2 0 002 2h2m0 4H6a2 2 0 01-2-2v-3a2 2 0 012-2h2m8 0h2a2 2 0 012 2v3a2 2 0 01-2 2h-2"
                />
              </svg>
              {item.address}, {item.city}, {item.country}
            </div>
            <div className="flex items-center text-sm text-gray-700">
              <svg className="h-3.5 w-3.5 mr-1 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                />
              </svg>
              {item.budget || "Not specified"}
            </div>
          </div>
          {type === "source" && (
            <button
              onClick={() => handleContact(item)}
              className="mt-2 px-3 py-1 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Contact
            </button>
          )}
        </div>

        <div className="flex-shrink-0">
          <div
            className={`w-4 h-4 rounded border-2 cursor-pointer ${
              isSelected ? "bg-blue-500 border-blue-500" : "border-gray-300"
            }`}
            onClick={(e) => {
              e.stopPropagation()
              onSelect(item.id)
            }}
          >
            {isSelected && (
              <svg className="w-full h-full text-white" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fillRule="evenodd"
                  d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                  clipRule="evenodd"
                />
              </svg>
            )}
          </div>
        </div>
      </div>
    </div>
  )

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="flex items-center justify-center h-64">
          <div className="text-xl">Loading pipeline...</div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Sales Pipeline</h1>
          <p className="mt-2 text-gray-600">Select and move leads between available and contacted lists</p>
        </div>

        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          <div className="p-4 border-b bg-gray-50">
            <div className="flex items-center justify-between">
              {target.length > 0 && (
                <button className="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors">
                  <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  Process Selection
                </button>
              )}
            </div>
          </div>

          <div className="p-4">
            <div className="flex flex-col lg:flex-row gap-4">
              {/* Source List */}
              <div className="flex-1">
                <div className="p-3 bg-gray-50 border-b rounded-t-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Available Leads</h3>
                  <div className="relative">
                    <svg
                      className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                    <input
                      type="text"
                      placeholder="Search available leads..."
                      value={sourceFilter}
                      onChange={(e) => setSourceFilter(e.target.value)}
                      className="pl-9 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <div className="h-96 overflow-y-auto bg-gray-50 p-2 rounded-b-lg border border-t-0">
                  {filteredSource.map((item) => (
                    <LeadCard
                      key={item.id}
                      item={item}
                      isSelected={selectedSource.includes(item.id)}
                      onSelect={handleSourceSelect}
                      type="source"
                    />
                  ))}
                  {filteredSource.length === 0 && (
                    <div className="text-center py-8 text-gray-500">No leads found</div>
                  )}
                </div>
              </div>

              {/* Control Buttons */}
              <div className="flex lg:flex-col justify-center items-center gap-2 py-4">
                <button
                  onClick={moveToTarget}
                  disabled={selectedSource.length === 0}
                  className="p-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
                <button
                  onClick={moveToSource}
                  disabled={selectedTarget.length === 0}
                  className="p-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
              </div>

              {/* Target List */}
              <div className="flex-1">
                <div className="p-3 bg-gray-50 border-b rounded-t-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Contacted Leads</h3>
                  <div className="relative">
                    <svg
                      className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                    <input
                      type="text"
                      placeholder="Search contacted leads..."
                      value={targetFilter}
                      onChange={(e) => setTargetFilter(e.target.value)}
                      className="pl-9 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <div className="h-96 overflow-y-auto bg-gray-50 p-2 rounded-b-lg border border-t-0">
                  {filteredTarget.map((item) => (
                    <LeadCard
                      key={item.id}
                      item={item}
                      isSelected={selectedTarget.includes(item.id)}
                      onSelect={handleTargetSelect}
                      type="target"
                    />
                  ))}
                  {filteredTarget.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      {target.length === 0 ? "No leads contacted" : "No leads found"}
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="flex justify-center mt-4">
              <div className="flex items-center text-sm text-gray-500 bg-gray-50 px-3 py-2 rounded-lg">
                <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                </svg>
                Click to select items, then use the arrow buttons to move them
              </div>
            </div>
          </div>
        </div>

        {target.length > 0 && (
          <div className="mt-6 flex justify-end gap-3">
            <button
              onClick={() => {
                setTarget([])
                setSelectedTarget([])
              }}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
            >
              Clear Selection
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

export default ViewPipeLine